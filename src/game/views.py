"""–£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è Discord-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
from __future__ import annotations

import math
from dataclasses import dataclass
from typing import Dict, Iterable, List, Optional

from ..models import Girl, Job, Market, Player

__all__ = ["MarketWorkView", "SelectOption", "Select", "Button"]


@dataclass
class SelectOption:
    value: str
    label: str
    description: str = ""


class Select:
    def __init__(self) -> None:
        self.options: List[SelectOption] = []
        self.placeholder: str = ""


class Button:
    def __init__(self) -> None:
        self.disabled: bool = False


class MarketWorkView:
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞.

    –ö–ª–∞—Å—Å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç discord.py –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å,
    –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö: –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ –¥–µ–≤—É—à–∫–∞–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –æ–ø—Ü–∏–π
    –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """

    GIRLS_PER_PAGE = 24

    def __init__(
        self,
        *,
        user_id: int,
        invoker_id: int,
        forced_level: Optional[int],
        player: Player,
        market: Market,
    ) -> None:
        self.user_id = user_id
        self.invoker_id = invoker_id
        self.forced_level = forced_level
        self.player = player
        self.market = market

        self.girl_page = 0
        self.girl_select = Select()
        self.job_select = Select()
        self.girl_prev_page_btn = Button()
        self.girl_next_page_btn = Button()
        self._job_value_to_id: Dict[str, Optional[str]] = {}

        self._build_job_options()
        self._apply_state()

    # ------------------------- –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ü–∏–π -------------------------
    def _build_job_options(self) -> None:
        options: List[SelectOption] = [
            SelectOption("none", "–ù–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        ]
        self._job_value_to_id = {"none": None}
        seen: Dict[str, int] = {}
        for index, job in enumerate(self.market.jobs):
            canonical = (job.job_id or "").strip() or f"job-{index}"
            seq = seen.get(canonical, 0)
            seen[canonical] = seq + 1
            value = f"job-{index}-{seq}"[:100]
            canonical_id = canonical if seq == 0 else f"{canonical}#{seq}"
            self._job_value_to_id[value] = canonical_id
            label = f"{job.demand_main}/{job.demand_sub} ‚Äî {job.pay}üí∞"
            description = f"{canonical_id} ‚Ä¢ diff {job.difficulty}"
            options.append(SelectOption(value, label, description))
        self.job_select.options = options
        self.job_select.placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ"

    # ------------------------- –ø–∞–≥–∏–Ω–∞—Ü–∏—è -------------------------
    def _apply_state(self) -> None:
        girls = sorted(self.player.girls, key=lambda g: g.uid)
        per_page = self.GIRLS_PER_PAGE
        total_pages = max(1, math.ceil(len(girls) / per_page))
        self.girl_page = max(0, min(self.girl_page, total_pages - 1))
        start = self.girl_page * per_page
        end = start + per_page
        page_slice = girls[start:end]

        options: List[SelectOption] = [
            SelectOption("none", "–ù–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥–µ–≤—É—à–∫—É", "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ"),
        ]
        for girl in page_slice:
            percent = int(round(girl.mentorship_bonus * 100)) if girl.mentorship_bonus else 0
            label = f"{girl.name} ({girl.uid})"
            description = f"{girl.name} ‚Ä¢ {girl.uid}"
            if percent:
                label += f" +{percent}%"
                description += f" ‚Ä¢ +{percent}% mentorship"
            options.append(SelectOption(girl.uid, label, description))

        self.girl_select.options = options
        self.girl_select.placeholder = f"Page {self.girl_page + 1}/{total_pages}"
        self.girl_prev_page_btn.disabled = self.girl_page <= 0
        self.girl_next_page_btn.disabled = self.girl_page >= total_pages - 1

    # ------------------------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã -------------------------
    def _format_result_lines(self, result: dict, girl: Girl, job: Job) -> List[str]:
        if result.get("ok"):
            reward = result.get("reward", 0)
            return [
                f"‚úÖ {girl.name} –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ {reward} –º–æ–Ω–µ—Ç.",
            ]
        reason = result.get("reason", "–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        lines = [f"‚ùå {reason}"]
        if result.get("spent_resources"):
            lines.append("–†–∞—Å—Ö–æ–¥—ã: –ø–æ—Ç—Ä–∞—á–µ–Ω—ã —Å–∏–ª–∞ –∏ —Å—Ç—Ä–∞—Å—Ç—å.")
        else:
            lines.append("No resources spent")
        return lines

